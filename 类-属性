init:为了对创建的实例对象进行初始化，即给实例对象那个一些属性。

行为为一个定义的函数，是类中特殊的函数
实例属性：
1.再类对象内部：(方法中)
语法格式:self.属性名=属性值
推荐在特殊方法__init__中绑定，因为创建实例对象后会自动调用特殊方法__init__对实例初始化
2.再类对象外部：
语法格式：实例对象.属性名=属性值
注意：同一类对象的不同实例对象所绑定的实例属性是相互独立的。也就是说，给一个实例对象所绑定的实例属性，对于另一个实例对象是不起作用的。
实例对象：可获得该实例对象的所有值及其字典。
类属性：
1.在类对象内部：
语法格式：属性名=属性值
2.在类对象外部：
类对象.属性名=属性值
在类对象内部绑定类属性：cal
在类对象内部访问类属性：print(Myclass.cal)
类对象的实例对象都可以访问类属性
————————————————
版权声明：本文为CSDN博主「XUHAOYU98」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/ThinkingOutLoud/article/details/89945771



# 属性：类属性和实例属性
# 类属性 就是类对象所拥有的属性
class Student:
    name='李明' #属于类属性  就是student类对象所拥有的
    def __init__(self,age):
        self.age=age #实例属性
        pass
    @staticmethod
    def aaa(x,y):
        print(x+y)
    pass

Student.name='李易峰' #通过类对象去修改数据 可以修改的  因为name的所拥有的权利属于类对象

lm=Student(18)
print(lm.name) #通过实例对象去访问类属性
# lm.name='刘德华'  #通过实例对象 对类属性进行修改 可以吗? 不可以的
print(lm.name)
print(lm.age)
Student.aaa(4,6)
print('---------xh的数据---------------')
xh=Student(28)
print(xh.name)
print(xh.age)
print('---------通过类对象 student 去访问name---------------')
# print(Student.name)  如 类名.属性名 形式去访问
# print(Student.age)   类属性中没有name，会报错
# 小结
# 类属性是可以 被类对象和实例对象共同访问使用的
# 实例属性只能由实例对象所访问


