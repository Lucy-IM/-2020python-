序列：在python当中 序列就是一组按照顺序排列的值【数据集合】
在python中 存在三种内置的序列类型：
字符串、列表、元组
优点：可以支持索引和切片的操作
特征：第一个正索引为0，指向的是左端，第一个索引为负数的时候，指向的是右端

切片：【高级特性】可以根据下表来获取序列对象的任意[部分]数据
语法结构：[start:end:step] step默认1

list:python当中非常重要的数据结构，是一种有序的数据集合
特点：
1：支持增删改查
2：列表中的数据是可以变化的【数据项可以变化，内存地址不会改变】
3:用[] 来表示列表类型，数据项之间用逗号来分割，注意：数据项可以是任何类型的数据
4：支持索引和切片来进行操作

元组：是一种不可变的序列，在创建之后不能做任何的修改
1：不可变
2：用（）创建元组类型，数据项用逗号来分割
3：可以是任何的类型
4：当元组中只有一个元素时，要加上逗号，不然后解释器会当做其他类型来处理
5：同样可是支持切片操作

字典：也是python中重要的数据类型，字典是有 键值对 组成的集合，通常使用 键来访问数据，效率非常高，和list一样 支持对数据的添加、修改、删除
特点：
1：不是序列类型 没有下标的概念，是一个无序的 键值集合，是内置的高级数据类型
2：用{} 来表示字典对象，每个键值对用逗号分隔
3：键 必须是不可变的类型【元组、字符串】 值可以是任意的类型
4: 每个键必定是惟一的，如果存在重复的键，后者会覆盖前者

下面是例子：
一、字符串操作
Test='python'
# print(type(Test))
# print('获取第一个字符%s'%Test[0])
# print('获取第二个字符%s'%Test[1])
# for item in Test:
#     print(item,end=' ')
name='peter'
# print('姓名首字母转换大写%s'%name.capitalize()) capitalize 首字母变大写
a='     hello       '
# b=a.strip() #去除字符串中两边的空格
# print(a)
# print(a.lstrip()) #删除左边的空格
# print(a.rstrip()) #删除右边的空格
# 复制字符串
# print('a的内存地址%d'%id(a)) #id函数 可以查看一个对象的内存地址
# b=a #在此只是把a对象的内存地址赋给了b
# print('a的内存地址%d'%id(a))
# print(b)
# dataStr='I love Python'
# print(dataStr.find('M')) #find函数可以查找目标对象在序列对象中的为值,如果没找到就返回-1
# print(dataStr.index('W')) #检测字符串中是否包含子字符串 返回的是下标值
# index如果没有找到对象的数据 便会报异常，而find函数不会，找不到返回-1
# print(dataStr.startswith('I'))  #判断开头
# print(dataStr.endswith('n'))#判断结尾
#
# print(dataStr.lower()) #转换成小写
# print(dataStr.upper())#转换成大写

strMsg='hello world'
# slice [start:end:step] 左闭右开  start<=value<end 范围
# print(strMsg) #输出完整的数据
# print(strMsg[0])
print(strMsg[2:5]) #2-5下标之间的数据
print(strMsg[2:]) #第三个字符到最后
print(strMsg[:3]) #1-3    strMsg[0:3]=strMsg[:3]
print(strMsg[::-1]) #倒叙输出  负号表示方向  从右边往左去遍历
# 共有方法  +  *  in
# 字符串合并
strA='人生苦短'
strB='我用Python'
# list 合并
listA=list(range(10))
listB=list(range(11,20))
print(listA+listB)
# print(strA+strB)
# 复制 *
# print(strA*3)
# print(listA*3)
# in  对象是否存在 结果是一个bool值
print('我' in strA) #False
print(9 in listA)  #False
dictA={"name":"peter"}
print("name" in dictA)
